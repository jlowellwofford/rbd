---
consumes:
- application/github.com.bensallen.rbd.v1+json
info:
  description: Manage RBD devices, mounts, and containers
  title: Rados Block Device Boot
  version: 1.0.0
produces:
- application/github.com.bensallen.rbd.v1+json
schemes:
- http
- https
swagger: "2.0"

definitions:

  rbd_options:
    type: object
    properties:
      fsid:
        type: string
      ip:
        type: string
        format: ipv4
        pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
      share:
        type: boolean
      noshare:
        type: boolean
      crc:
        type: boolean
      nocrc:
        type: boolean
      ceph_requires_signatures:
        type: boolean
      noceph_requires_signatures:
        type: boolean
      tcp_nodelay:
        type: boolean
      notcp_nodelay:
        type: boolean
      cephx_sign_messages:
        type: boolean
      nocephx_sign_messages:
        type: boolean
      mount_timeout:
        type: integer
      osdkeepalive:
        type: integer
      osd_idle_ttl:
        type: integer
      force:
        type: boolean
      rw:
        type: boolean
      ro:
        type: boolean
      queue_depth:
        type: integer
      lock_on_read:
        type: boolean
      exclusive:
        type: boolean
      lock_timeout:
        type: integer
        format: int64
      notrim:
        type: boolean
      abort_on_full:
        type: boolean
      alloc_size:
        type: integer
      name:
        type: string
      secret:
        type: string
      namespace:
        type: string

  rbd:
    description: |
      rbd describes an RBD map.  To successfully map, at least one monitor, pool and image must be specified.
      Additionally, you will need options.name and options.secret specified.
    type: object
    required:
      - monitors
      - pool
      - image
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      refs:
        type: integer
        format: int64
        readOnly: true
      #external 
      monitors:
        type: array
        items:
          type: string
          format: ipv4
          pattern: '^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
      pool:
        type: string
        minLength: 1
      image:
        type: string
        minLength: 1
      snapshot:
        type: string
      options:
        $ref: "#/definitions/rbd_options"
    
  mount_rbd:
    description:
      mount_rbd describes an RBD mount.  This must have at least and RBD ID associated with it
      (which becomes the mount's ID), and a provided filesystem type.
    type: object
    required:
      - id
      - fs_type
    properties:
      mountpoint:
        type: string
        readOnly: true
      ref:
        type: integer
        format: int64
        readOnly: true
      # external
      id: 
        description: must be a valid rbd device id
        type: integer
        format: int64
      fs_type:
        type: string
      mount_options:
        type: array
        items:
          type: string

  mount_overlay:
    description: |
      `mount_overlay` describes an Overlayfs mount.  All mount points must be RBD ID's.
      At very least, `lower` must be specified.  If `upper` length is zero, no `upper`
      mounts will be used.  `workdir` will be assigned automatically.

      Overlay mounts are identified by their `lower` ID.
    type: object
    required:
      - lower
    properties:
      # internal
      id:
        type: integer
        format: int64
        readOnly: true
      mountpoint:
        type: string
        readOnly: true
      workdir:
        type: string
        readOnly: true
      upperdir:
        description:  currently, upperdir is always a directory in mountDir
        type: string
        readOnly: true
      ref:
        type: integer
        format: int64
        readOnly: true
      # external
      lower:
        description: This is an array of RBD IDs, interpreted in order for multiple lower dirs. At least one must be specified.
        type: array
        items:
          type: integer
          format: int64

  mount:
    description: Generically address mounts by kind and ID
    type: object
    required:
      - kind
      - id
    properties:
      id:
        type: integer
        format: int64
      kind:
        type: string
        enum: [ "overlay", "rbd" ]


  container_namespace:
    description: Linux namespace
    type: string
    enum: [ "cgroup", "ipc", "net", "mnt", "pid", "time", "user", "uts" ]

  container_state:
    description: Valid container states
    type: string
    # stolen straight from docker (even if we don't use them all)
    enum: [ "created",  "running", "restarting", "paused", "exited", "dead" ]

  container:
    description: The `container` option describes a minimally namespaced container.
    type: object
    required:
      - mount
      - command
    properties:
      # internal
      id:
        type: integer
        format: int64
        readOnly: true
      logfile:
        type: string
        readOnly: true
      # external
      mount:
        $ref: "#/definitions/mount"
      command:
        type: string
      state:
        description: |
          When read, this contains the current container state.
          On creation, this requests the initial state (valid options: `created` or `running`).
          The default is `created`.
        $ref: "#/definitions/container_state"
        enum: [ "created",  "running", "restarting", "paused", "exited", "dead" ]
      namespaces:
        description: |
          A list of Linux namespaces to use.

          Note: This is currently unused.  All containers currently get `mnt` and `pid`.
                It's here as a placeholder for future use.
        type: array
        items:
          $ref: "#/definitions/container_namespace"

  error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string

  
paths:

  /rbd:
    # get a list of rbds
    get:
      tags:
        - rbds
      operationId: list_rbds
      responses:
        200:
          description: list of rbd maps
          schema:
            type: array
            items:
              $ref: "#/definitions/rbd"
        default:
          description: generic error response
          schema:
            $ref: "#/definitions/error"
    post:
      tags:
        - rbds
      operationId: map_rbd
      parameters:
        - name: rbd
          in: body
          required: true
          schema:
            $ref: "#/definitions/rbd"
      responses:
        201:
          description: RBD attach succeed
          schema:
            $ref: "#/definitions/rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /rbd/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - rbds
      operationId: get_rbd
      responses:
        200:
          description: RBD entry
          schema:
            $ref: "#/definitions/rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - rbds
      operationId: unmap_rbd
      responses:
        204:
          description: Unmapped
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /mount/rbd:

    get:
      tags:
        - mounts
      operationId: list_mounts_rbd
      responses:
        200:
          description: list of rbd mounts
          schema:
            type: array
            items:
              $ref: "#/definitions/mount_rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - mounts
      operationId: mount_rbd
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount_rbd"
      responses:
        201:
          description: RBD mount succeed
          schema:
            $ref: "#/definitions/mount_rbd"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /mount/rbd/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - mounts
      operationId: get_mount_rbd
      responses:
        200:
          description: RBD mount entry
          schema:
            $ref: "#/definitions/mount_rbd"
        default: 
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - mounts
      operationId: unmount_rbd
      responses:
        204:
          description: Unmounted
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /mount/overlay:

    get:
      tags:
        - mounts
      operationId: list_mounts_overlay
      responses:
        200:
          description: list of overlay mounts
          schema:
            type: array
            items:
              $ref: "#/definitions/mount_overlay"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - mounts
      operationId: mount_overlay
      parameters:
        - name: mount
          in: body
          required: true
          schema:
            $ref: "#/definitions/mount_overlay"
      responses:
        201:
          description: Overlay mount succeed
          schema:
            $ref: "#/definitions/mount_overlay"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /mount/overlay/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
    get:
      tags:
        - mounts
      operationId: get_mount_overlay
      responses:
        200:
          description: Overlay mount entry
          schema:
            $ref: "#/definitions/mount_overlay"
        default: 
          description: error
          schema:
            $ref: "#/definitions/error"
    delete:
      tags:
        - mounts
      operationId: unmount_overlay
      responses:
        204:
          description: Unmounted
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  
  /container:
    get:
      tags:
        - containers
      description: Get a list of containers
      operationId: list_containers
      responses:
        200:
          description: List of containers
          schema:
            type: array
            items:
              $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    post:
      tags:
        - containers
      description: Create a container
      operationId: create_container
      responses:
        201:
          description: Container creation succeed
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /container/{id}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true

    get:
      description: Get a container definition
      operationId: get_container
      responses:
        200:
          description: Container entry
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

    delete:
      description: |
        Delete a container defition.  
        This will stop running containers.
      operationId: delete_container
      responses:
        204:
          description: Container deleted
        default:
          description: error
          schema:
            $ref: "#/definitions/error"

  /container/{id}/{state}:
    parameters:
      - type: integer
        format: int64
        name: id
        in: path
        required: true
      - type: string
        enum: [ "running", "exited" ]
        in: path
        name: state
        required: true

    get:
      description: |
        Request a (valid) state for a container. 
        Valid states to request include: `running`, `exited`, `paused` (paused is not yet implemented)
      operationId: set_container_state
      responses:
        200:
          description: Container state changed
          schema:
            $ref: "#/definitions/container"
        default:
          description: error
          schema:
