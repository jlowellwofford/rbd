// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Mount Generically address mounts by kind and ID
//
// swagger:model mount
type Mount struct {

	// id
	// Required: true
	ID *int64 `json:"id"`

	// kind
	// Required: true
	// Enum: [overlay rbd]
	Kind *string `json:"kind"`
}

// Validate validates this mount
func (m *Mount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mount) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var mountTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["overlay","rbd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mountTypeKindPropEnum = append(mountTypeKindPropEnum, v)
	}
}

const (

	// MountKindOverlay captures enum value "overlay"
	MountKindOverlay string = "overlay"

	// MountKindRbd captures enum value "rbd"
	MountKindRbd string = "rbd"
)

// prop value enum
func (m *Mount) validateKindEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mountTypeKindPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Mount) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", *m.Kind); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mount based on context it is used
func (m *Mount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Mount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Mount) UnmarshalBinary(b []byte) error {
	var res Mount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
