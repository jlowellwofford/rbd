// Code generated by go-swagger; DO NOT EDIT.

package rbds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rbds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rbds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRbd(params *GetRbdParams) (*GetRbdOK, error)

	ListRbds(params *ListRbdsParams) (*ListRbdsOK, error)

	MapRbd(params *MapRbdParams) (*MapRbdCreated, error)

	UnmapRbd(params *UnmapRbdParams) (*UnmapRbdNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetRbd get rbd API
*/
func (a *Client) GetRbd(params *GetRbdParams) (*GetRbdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRbdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "get_rbd",
		Method:             "GET",
		PathPattern:        "/rbd/{id}",
		ProducesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		ConsumesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRbdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRbdOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRbdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListRbds list rbds API
*/
func (a *Client) ListRbds(params *ListRbdsParams) (*ListRbdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list_rbds",
		Method:             "GET",
		PathPattern:        "/rbd",
		ProducesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		ConsumesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRbdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListRbdsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MapRbd map rbd API
*/
func (a *Client) MapRbd(params *MapRbdParams) (*MapRbdCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMapRbdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "map_rbd",
		Method:             "POST",
		PathPattern:        "/rbd",
		ProducesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		ConsumesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &MapRbdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MapRbdCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MapRbdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnmapRbd unmap rbd API
*/
func (a *Client) UnmapRbd(params *UnmapRbdParams) (*UnmapRbdNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnmapRbdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unmap_rbd",
		Method:             "DELETE",
		PathPattern:        "/rbd/{id}",
		ProducesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		ConsumesMediaTypes: []string{"application/github.com.bensallen.rbd.v1+json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnmapRbdReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnmapRbdNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnmapRbdDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
