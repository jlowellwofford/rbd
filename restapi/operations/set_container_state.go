// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SetContainerStateHandlerFunc turns a function with the right signature into a set container state handler
type SetContainerStateHandlerFunc func(SetContainerStateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetContainerStateHandlerFunc) Handle(params SetContainerStateParams) middleware.Responder {
	return fn(params)
}

// SetContainerStateHandler interface for that can handle valid set container state params
type SetContainerStateHandler interface {
	Handle(SetContainerStateParams) middleware.Responder
}

// NewSetContainerState creates a new http.Handler for the set container state operation
func NewSetContainerState(ctx *middleware.Context, handler SetContainerStateHandler) *SetContainerState {
	return &SetContainerState{Context: ctx, Handler: handler}
}

/*SetContainerState swagger:route GET /container/{id}/{state} setContainerState

Request a (valid) state for a container.
Valid states to request include: `running`, `exited`, `paused` (paused is not yet implemented)


*/
type SetContainerState struct {
	Context *middleware.Context
	Handler SetContainerStateHandler
}

func (o *SetContainerState) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetContainerStateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
