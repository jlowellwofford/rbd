// Code generated by go-swagger; DO NOT EDIT.

package mounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UnmountRbdHandlerFunc turns a function with the right signature into a unmount rbd handler
type UnmountRbdHandlerFunc func(UnmountRbdParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UnmountRbdHandlerFunc) Handle(params UnmountRbdParams) middleware.Responder {
	return fn(params)
}

// UnmountRbdHandler interface for that can handle valid unmount rbd params
type UnmountRbdHandler interface {
	Handle(UnmountRbdParams) middleware.Responder
}

// NewUnmountRbd creates a new http.Handler for the unmount rbd operation
func NewUnmountRbd(ctx *middleware.Context, handler UnmountRbdHandler) *UnmountRbd {
	return &UnmountRbd{Context: ctx, Handler: handler}
}

/*UnmountRbd swagger:route DELETE /mount/rbd/{id} mounts unmountRbd

UnmountRbd unmount rbd API

*/
type UnmountRbd struct {
	Context *middleware.Context
	Handler UnmountRbdHandler
}

func (o *UnmountRbd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUnmountRbdParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
