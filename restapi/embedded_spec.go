// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "produces": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage RBD devices, mounts, and containers",
    "title": "Rados Block Device Boot",
    "version": "1.0.0"
  },
  "paths": {
    "/mount/overlay": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "list_mounts_overlay",
        "responses": {
          "200": {
            "description": "list of overlay mounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mount_overlay"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "mounts"
        ],
        "operationId": "mount_overlay",
        "parameters": [
          {
            "name": "mount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Overlay mount succeed",
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mount/overlay/{lower}": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "get_mount_overlay",
        "responses": {
          "200": {
            "description": "Overlay mount entry",
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mounts"
        ],
        "operationId": "unmount_overlay",
        "responses": {
          "204": {
            "description": "Unmounted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "lower",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mount/rbd": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "list_mounts_rbd",
        "responses": {
          "200": {
            "description": "list of rbd mounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mount_rbd"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "mounts"
        ],
        "operationId": "mount_rbd",
        "parameters": [
          {
            "name": "mount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD mount succeed",
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mount/rbd/{id}": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "get_mount_rbd",
        "responses": {
          "200": {
            "description": "RBD mount entry",
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mounts"
        ],
        "operationId": "unmount_rbd",
        "responses": {
          "204": {
            "description": "Unmounted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/rbd": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "list_rbds",
        "responses": {
          "200": {
            "description": "list of rbd maps",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rbd"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "rbds"
        ],
        "operationId": "map_rbd",
        "parameters": [
          {
            "name": "rbd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD attach succeed",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/rbd/{id}": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "get_rbd",
        "responses": {
          "200": {
            "description": "RBD entry",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rbds"
        ],
        "operationId": "unmap_rbd",
        "responses": {
          "204": {
            "description": "Unmapped"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "mount_overlay": {
      "description": "` + "`" + `mount_overlay` + "`" + ` describes an Overlayfs mount.  All mount points must be RBD ID's.\nAt very least, ` + "`" + `lower` + "`" + ` must be specified.  If ` + "`" + `upper` + "`" + ` length is zero, no ` + "`" + `upper` + "`" + `\nmounts will be used.  ` + "`" + `workdir` + "`" + ` will be assigned automatically.\n\nOverlay mounts are identified by their ` + "`" + `lower` + "`" + ` ID.\n",
      "type": "object",
      "required": [
        "lower"
      ],
      "properties": {
        "lower": {
          "type": "integer",
          "format": "int64"
        },
        "mountpoint": {
          "type": "string",
          "readOnly": true
        },
        "ref": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "uppers": {
          "description": "This array of RBD ID's is interpreted in order, and will be layered in the order provided.\n",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "workdir": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "mount_rbd": {
      "description": "mount_rbd describes an RBD mount.  This must have at least and RBD ID associated with it (which becomes the mount's ID), and a provided filesystem type.",
      "type": "object",
      "required": [
        "id",
        "fs_type"
      ],
      "properties": {
        "fs_type": {
          "type": "string"
        },
        "id": {
          "description": "must be a valid rbd device id",
          "type": "integer",
          "format": "int64"
        },
        "mount_options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mountpoint": {
          "type": "string",
          "readOnly": true
        },
        "ref": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "rbd": {
      "description": "rbd describes an RBD map.  To successfully map, at least one monitor, pool and image must be specified.\nAdditionally, you will need options.name and options.secret specified.\n",
      "type": "object",
      "required": [
        "monitors",
        "pool",
        "image"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "image": {
          "type": "string",
          "minLength": 1
        },
        "monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4",
            "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
          }
        },
        "options": {
          "$ref": "#/definitions/rbd_options"
        },
        "pool": {
          "type": "string",
          "minLength": 1
        },
        "refs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "rbd_options": {
      "type": "object",
      "properties": {
        "abort_on_full": {
          "type": "boolean"
        },
        "alloc_size": {
          "type": "integer"
        },
        "ceph_requires_signatures": {
          "type": "boolean"
        },
        "cephx_sign_messages": {
          "type": "boolean"
        },
        "crc": {
          "type": "boolean"
        },
        "exclusive": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "fsid": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "format": "ipv4",
          "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
        },
        "lock_on_read": {
          "type": "boolean"
        },
        "lock_timeout": {
          "type": "integer",
          "format": "int64"
        },
        "mount_timeout": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "noceph_requires_signatures": {
          "type": "boolean"
        },
        "nocephx_sign_messages": {
          "type": "boolean"
        },
        "nocrc": {
          "type": "boolean"
        },
        "noshare": {
          "type": "boolean"
        },
        "notcp_nodelay": {
          "type": "boolean"
        },
        "notrim": {
          "type": "boolean"
        },
        "osd_idle_ttl": {
          "type": "integer"
        },
        "osdkeepalive": {
          "type": "integer"
        },
        "queue_depth": {
          "type": "integer"
        },
        "ro": {
          "type": "boolean"
        },
        "rw": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "share": {
          "type": "boolean"
        },
        "tcp_nodelay": {
          "type": "boolean"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "produces": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage RBD devices, mounts, and containers",
    "title": "Rados Block Device Boot",
    "version": "1.0.0"
  },
  "paths": {
    "/mount/overlay": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "list_mounts_overlay",
        "responses": {
          "200": {
            "description": "list of overlay mounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mount_overlay"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "mounts"
        ],
        "operationId": "mount_overlay",
        "parameters": [
          {
            "name": "mount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Overlay mount succeed",
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mount/overlay/{lower}": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "get_mount_overlay",
        "responses": {
          "200": {
            "description": "Overlay mount entry",
            "schema": {
              "$ref": "#/definitions/mount_overlay"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mounts"
        ],
        "operationId": "unmount_overlay",
        "responses": {
          "204": {
            "description": "Unmounted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "lower",
          "in": "path",
          "required": true
        }
      ]
    },
    "/mount/rbd": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "list_mounts_rbd",
        "responses": {
          "200": {
            "description": "list of rbd mounts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mount_rbd"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "mounts"
        ],
        "operationId": "mount_rbd",
        "parameters": [
          {
            "name": "mount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD mount succeed",
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/mount/rbd/{id}": {
      "get": {
        "tags": [
          "mounts"
        ],
        "operationId": "get_mount_rbd",
        "responses": {
          "200": {
            "description": "RBD mount entry",
            "schema": {
              "$ref": "#/definitions/mount_rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mounts"
        ],
        "operationId": "unmount_rbd",
        "responses": {
          "204": {
            "description": "Unmounted"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/rbd": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "list_rbds",
        "responses": {
          "200": {
            "description": "list of rbd maps",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rbd"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "rbds"
        ],
        "operationId": "map_rbd",
        "parameters": [
          {
            "name": "rbd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD attach succeed",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/rbd/{id}": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "get_rbd",
        "responses": {
          "200": {
            "description": "RBD entry",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rbds"
        ],
        "operationId": "unmap_rbd",
        "responses": {
          "204": {
            "description": "Unmapped"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "mount_overlay": {
      "description": "` + "`" + `mount_overlay` + "`" + ` describes an Overlayfs mount.  All mount points must be RBD ID's.\nAt very least, ` + "`" + `lower` + "`" + ` must be specified.  If ` + "`" + `upper` + "`" + ` length is zero, no ` + "`" + `upper` + "`" + `\nmounts will be used.  ` + "`" + `workdir` + "`" + ` will be assigned automatically.\n\nOverlay mounts are identified by their ` + "`" + `lower` + "`" + ` ID.\n",
      "type": "object",
      "required": [
        "lower"
      ],
      "properties": {
        "lower": {
          "type": "integer",
          "format": "int64"
        },
        "mountpoint": {
          "type": "string",
          "readOnly": true
        },
        "ref": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "uppers": {
          "description": "This array of RBD ID's is interpreted in order, and will be layered in the order provided.\n",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "workdir": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "mount_rbd": {
      "description": "mount_rbd describes an RBD mount.  This must have at least and RBD ID associated with it (which becomes the mount's ID), and a provided filesystem type.",
      "type": "object",
      "required": [
        "id",
        "fs_type"
      ],
      "properties": {
        "fs_type": {
          "type": "string"
        },
        "id": {
          "description": "must be a valid rbd device id",
          "type": "integer",
          "format": "int64"
        },
        "mount_options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mountpoint": {
          "type": "string",
          "readOnly": true
        },
        "ref": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "rbd": {
      "description": "rbd describes an RBD map.  To successfully map, at least one monitor, pool and image must be specified.\nAdditionally, you will need options.name and options.secret specified.\n",
      "type": "object",
      "required": [
        "monitors",
        "pool",
        "image"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "image": {
          "type": "string",
          "minLength": 1
        },
        "monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4",
            "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
          }
        },
        "options": {
          "$ref": "#/definitions/rbd_options"
        },
        "pool": {
          "type": "string",
          "minLength": 1
        },
        "refs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "rbd_options": {
      "type": "object",
      "properties": {
        "abort_on_full": {
          "type": "boolean"
        },
        "alloc_size": {
          "type": "integer"
        },
        "ceph_requires_signatures": {
          "type": "boolean"
        },
        "cephx_sign_messages": {
          "type": "boolean"
        },
        "crc": {
          "type": "boolean"
        },
        "exclusive": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "fsid": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "format": "ipv4",
          "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
        },
        "lock_on_read": {
          "type": "boolean"
        },
        "lock_timeout": {
          "type": "integer",
          "format": "int64"
        },
        "mount_timeout": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "noceph_requires_signatures": {
          "type": "boolean"
        },
        "nocephx_sign_messages": {
          "type": "boolean"
        },
        "nocrc": {
          "type": "boolean"
        },
        "noshare": {
          "type": "boolean"
        },
        "notcp_nodelay": {
          "type": "boolean"
        },
        "notrim": {
          "type": "boolean"
        },
        "osd_idle_ttl": {
          "type": "integer"
        },
        "osdkeepalive": {
          "type": "integer"
        },
        "queue_depth": {
          "type": "integer"
        },
        "ro": {
          "type": "boolean"
        },
        "rw": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "share": {
          "type": "boolean"
        },
        "tcp_nodelay": {
          "type": "boolean"
        }
      }
    }
  }
}`))
}
