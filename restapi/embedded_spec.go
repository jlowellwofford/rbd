// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "produces": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage RBD devices, mounts, and containers",
    "title": "Rados Block Device Boot",
    "version": "1.0.0"
  },
  "paths": {
    "/rbd": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "list_rbds",
        "responses": {
          "200": {
            "description": "list of rbd maps",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rbd"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "rbds"
        ],
        "operationId": "map_rbd",
        "parameters": [
          {
            "name": "rbd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD attach succeed",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/rbd/{id}": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "get_rbd",
        "responses": {
          "200": {
            "description": "RBD entry",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rbds"
        ],
        "operationId": "unmap_rbd",
        "responses": {
          "204": {
            "description": "Unmapped"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rbd": {
      "type": "object",
      "required": [
        "monitors",
        "pool",
        "image"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "image": {
          "type": "string",
          "minLength": 1
        },
        "monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4",
            "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
          }
        },
        "options": {
          "$ref": "#/definitions/rbd_options"
        },
        "pool": {
          "type": "string",
          "minLength": 1
        },
        "refs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "rbd_options": {
      "type": "object",
      "properties": {
        "abort_on_full": {
          "type": "boolean"
        },
        "alloc_size": {
          "type": "integer"
        },
        "ceph_requires_signatures": {
          "type": "boolean"
        },
        "cephx_sign_messages": {
          "type": "boolean"
        },
        "crc": {
          "type": "boolean"
        },
        "exclusive": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "fsid": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "format": "ipv4",
          "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
        },
        "lock_on_read": {
          "type": "boolean"
        },
        "lock_timeout": {
          "type": "integer",
          "format": "int64"
        },
        "mount_timeout": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "noceph_requires_signatures": {
          "type": "boolean"
        },
        "nocephx_sign_messages": {
          "type": "boolean"
        },
        "nocrc": {
          "type": "boolean"
        },
        "noshare": {
          "type": "boolean"
        },
        "notcp_nodelay": {
          "type": "boolean"
        },
        "notrim": {
          "type": "boolean"
        },
        "osd_idle_ttl": {
          "type": "integer"
        },
        "osdkeepalive": {
          "type": "integer"
        },
        "queue_depth": {
          "type": "integer"
        },
        "ro": {
          "type": "boolean"
        },
        "rw": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "share": {
          "type": "boolean"
        },
        "tcp_nodelay": {
          "type": "boolean"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "produces": [
    "application/github.com.bensallen.rbd.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Manage RBD devices, mounts, and containers",
    "title": "Rados Block Device Boot",
    "version": "1.0.0"
  },
  "paths": {
    "/rbd": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "list_rbds",
        "responses": {
          "200": {
            "description": "list of rbd maps",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/rbd"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "rbds"
        ],
        "operationId": "map_rbd",
        "parameters": [
          {
            "name": "rbd",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "RBD attach succeed",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/rbd/{id}": {
      "get": {
        "tags": [
          "rbds"
        ],
        "operationId": "get_rbd",
        "responses": {
          "200": {
            "description": "RBD entry",
            "schema": {
              "$ref": "#/definitions/rbd"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "rbds"
        ],
        "operationId": "unmap_rbd",
        "responses": {
          "204": {
            "description": "Unmapped"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "rbd": {
      "type": "object",
      "required": [
        "monitors",
        "pool",
        "image"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "image": {
          "type": "string",
          "minLength": 1
        },
        "monitors": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "ipv4",
            "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
          }
        },
        "options": {
          "$ref": "#/definitions/rbd_options"
        },
        "pool": {
          "type": "string",
          "minLength": 1
        },
        "refs": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "rbd_options": {
      "type": "object",
      "properties": {
        "abort_on_full": {
          "type": "boolean"
        },
        "alloc_size": {
          "type": "integer"
        },
        "ceph_requires_signatures": {
          "type": "boolean"
        },
        "cephx_sign_messages": {
          "type": "boolean"
        },
        "crc": {
          "type": "boolean"
        },
        "exclusive": {
          "type": "boolean"
        },
        "force": {
          "type": "boolean"
        },
        "fsid": {
          "type": "string"
        },
        "ip": {
          "type": "string",
          "format": "ipv4",
          "pattern": "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"
        },
        "lock_on_read": {
          "type": "boolean"
        },
        "lock_timeout": {
          "type": "integer",
          "format": "int64"
        },
        "mount_timeout": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "noceph_requires_signatures": {
          "type": "boolean"
        },
        "nocephx_sign_messages": {
          "type": "boolean"
        },
        "nocrc": {
          "type": "boolean"
        },
        "noshare": {
          "type": "boolean"
        },
        "notcp_nodelay": {
          "type": "boolean"
        },
        "notrim": {
          "type": "boolean"
        },
        "osd_idle_ttl": {
          "type": "integer"
        },
        "osdkeepalive": {
          "type": "integer"
        },
        "queue_depth": {
          "type": "integer"
        },
        "ro": {
          "type": "boolean"
        },
        "rw": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "share": {
          "type": "boolean"
        },
        "tcp_nodelay": {
          "type": "boolean"
        }
      }
    }
  }
}`))
}
